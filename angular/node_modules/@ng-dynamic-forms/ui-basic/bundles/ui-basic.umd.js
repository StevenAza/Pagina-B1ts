/*!
@ng-dynamic-forms/ui-basic 7.0.1 2018-11-03 16:32 UTC
Copyright (c) 2016-2018, Udo Sch√∂fer http://www.udos86.de

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@ng-dynamic-forms/core'), require('@angular/common'), require('angular2-text-mask')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', '@ng-dynamic-forms/core', '@angular/common', 'angular2-text-mask'], factory) :
    (factory((global.ngDF = global.ngDF || {}, global.ngDF.basicUI = {}),global.ng.core,global.ng.forms,global.ngDF.core,global.ng.common,global['angular2-text-mask']));
}(this, (function (exports,core,forms,core$1,common,angular2TextMask) { 'use strict';

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicCheckboxComponent = /** @class */ (function (_super) {
        __extends(DynamicBasicCheckboxComponent, _super);
        function DynamicBasicCheckboxComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicCheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-checkbox",
                        template: "<label [formGroup]=\"group\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\">\n\n    <input type=\"checkbox\"\n           [checked]=\"model.checked\"\n           [formControlName]=\"model.id\"\n           [id]=\"elementId\"\n           [indeterminate]=\"model.indeterminate\"\n           [name]=\"model.name\"\n           [required]=\"model.required\"\n           [tabindex]=\"model.tabIndex\"\n           [value]=\"model.value\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/><span [ngClass]=\"getClass('element', 'label')\"\n                                            [innerHTML]=\"model.label\"></span></label>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicCheckboxComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicCheckboxComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicCheckboxComponent;
    }(core$1.DynamicFormControlComponent));

    var __extends$1 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicFormArrayComponent = /** @class */ (function (_super) {
        __extends$1(DynamicBasicFormArrayComponent, _super);
        function DynamicBasicFormArrayComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicFormArrayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-form-array",
                        template: "<ng-container [formGroup]=\"group\">\n\n    <div [formArrayName]=\"model.id\" [id]=\"elementId\" [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-basic-form-control *ngFor=\"let _model of groupModel.group\"\n                                        [context]=\"groupModel\"\n                                        [group]=\"control.at(idx)\"\n                                        [hidden]=\"_model.hidden\"\n                                        [layout]=\"layout\"\n                                        [model]=\"_model\"\n                                        [templates]=\"templates\"\n                                        [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model),\n                                                    getClass('element','children'), getClass('grid','children')]\"\n                                        (blur)=\"onBlur($event)\"\n                                        (change)=\"onChange($event)\"\n                                        (focus)=\"onFocus($event)\"\n                                        (bsEvent)=\"onCustomEvent($event, null, true)\"></dynamic-basic-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n"
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicFormArrayComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicFormArrayComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            templates: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            customEvent: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicFormArrayComponent;
    }(core$1.DynamicFormArrayComponent));

    var __extends$2 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicFormGroupComponent = /** @class */ (function (_super) {
        __extends$2(DynamicBasicFormGroupComponent, _super);
        function DynamicBasicFormGroupComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.customEvent = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicFormGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-form-group",
                        template: "<ng-container [formGroup]=\"group\">\n\n    <fieldset [formGroupName]=\"model.id\"\n              [id]=\"elementId\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\">\n\n        <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n        <dynamic-basic-form-control *ngFor=\"let _model of model.group\"\n                                    [group]=\"control\"\n                                    [hidden]=\"_model.hidden\"\n                                    [layout]=\"layout\"\n                                    [model]=\"_model\"\n                                    [templates]=\"templates\"\n                                    [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model),\n                                                getClass('element','children'), getClass('grid','children')]\"\n                                    (blur)=\"onBlur($event)\"\n                                    (change)=\"onChange($event)\"\n                                    (focus)=\"onFocus($event)\"\n                                    (bsEvent)=\"onCustomEvent($event, null, true)\"></dynamic-basic-form-control>\n    </fieldset>\n\n</ng-container>\n"
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicFormGroupComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicFormGroupComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            templates: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            customEvent: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicFormGroupComponent;
    }(core$1.DynamicFormControlComponent));

    var __extends$3 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicInputComponent = /** @class */ (function (_super) {
        __extends$3(DynamicBasicInputComponent, _super);
        function DynamicBasicInputComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-input",
                        template: "<div [formGroup]=\"group\">\n\n    <input [attr.accept]=\"model.accept\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [dynamicList]=\"model.listId\"\n           [formControlName]=\"model.id\"\n           [id]=\"elementId\"\n           [maxlength]=\"model.maxLength\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <datalist *ngIf=\"model.hasList\" [id]=\"model.listId\">\n\n        <option *ngFor=\"let option of model.list$ | async\" [value]=\"option\">\n\n    </datalist>\n\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicInputComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicInputComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicInputComponent;
    }(core$1.DynamicFormControlComponent));

    var __extends$4 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicRadioGroupComponent = /** @class */ (function (_super) {
        __extends$4(DynamicBasicRadioGroupComponent, _super);
        function DynamicBasicRadioGroupComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicRadioGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-radio-group",
                        template: "<fieldset role=\"radiogroup\"\n          [formGroup]=\"group\"\n          [id]=\"elementId\"\n          [name]=\"model.name\"\n          [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n          [tabindex]=\"model.tabIndex\"\n          (change)=\"onChange($event)\">\n\n    <legend *ngIf=\"model.legend\" [innerHTML]=\"model.legend\"></legend>\n\n    <label *ngFor=\"let option of model.options$ | async\" [ngClass]=\"getClass('element', 'option')\">\n\n        <input type=\"radio\"\n               [formControlName]=\"model.id\"\n               [name]=\"model.name\"\n               [value]=\"option.value\"\n               (blur)=\"onBlur($event)\"\n               (focus)=\"onFocus($event)\"/><span [innerHTML]=\"option.label\"></span></label>\n</fieldset>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicRadioGroupComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicRadioGroupComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicRadioGroupComponent;
    }(core$1.DynamicFormControlComponent));

    var __extends$5 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicSelectComponent = /** @class */ (function (_super) {
        __extends$5(DynamicBasicSelectComponent, _super);
        function DynamicBasicSelectComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-select",
                        template: "<ng-container [formGroup]=\"group\">\n\n    <select [compareWith]=\"model.compareWithFn\"\n            [formControlName]=\"model.id\"\n            [id]=\"elementId\"\n            [name]=\"model.name\"\n            [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n            [required]=\"model.required\"\n            [tabindex]=\"model.tabIndex\"\n            (blur)=\"onBlur($event)\"\n            (change)=\"onChange($event)\"\n            (focus)=\"onFocus($event)\">\n\n        <option *ngFor=\"let option of model.options$ | async\"\n                [disabled]=\"option.disabled\"\n                [ngValue]=\"option.value\">{{ option.label }}\n        </option>\n\n    </select>\n\n</ng-container>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicSelectComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicSelectComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicSelectComponent;
    }(core$1.DynamicFormControlComponent));

    var __extends$6 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicTextAreaComponent = /** @class */ (function (_super) {
        __extends$6(DynamicBasicTextAreaComponent, _super);
        function DynamicBasicTextAreaComponent(layoutService, validationService) {
            var _this = _super.call(this, layoutService, validationService) || this;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicTextAreaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-textarea",
                        template: "<ng-container [formGroup]=\"group\">\n\n    <textarea [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"elementId\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n</ng-container>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicTextAreaComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicTextAreaComponent.propDecorators = {
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }]
        };
        return DynamicBasicTextAreaComponent;
    }(core$1.DynamicFormControlComponent));

    var __extends$7 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicFormControlContainerComponent = /** @class */ (function (_super) {
        __extends$7(DynamicBasicFormControlContainerComponent, _super);
        function DynamicBasicFormControlContainerComponent(componentFactoryResolver, layoutService, validationService) {
            var _this = _super.call(this, componentFactoryResolver, layoutService, validationService) || this;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.layoutService = layoutService;
            _this.validationService = validationService;
            _this.context = null;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(DynamicBasicFormControlContainerComponent.prototype, "componentType", {
            get: /**
             * @return {?}
             */
            function () {
                return this.layoutService.getCustomComponentType(this.model) || basicUIFormControlMapFn(this.model);
            },
            enumerable: true,
            configurable: true
        });
        DynamicBasicFormControlContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-form-control",
                        template: "<div [formGroup]=\"group\" [ngClass]=\"[getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!isCheckbox && hasLabel\"\n           [for]=\"elementId\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-container #componentViewContainer></ng-container>\n\n    <div *ngIf=\"hasHint\" [ngClass]=\"[getClass('element', 'hint'), getClass('grid', 'hint')]\">\n        <span [innerHTML]=\"model.hint\"></span>\n    </div>\n\n    <ul *ngIf=\"showErrorMessages\" [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n        <li *ngFor=\"let message of errorMessages\">{{ message }}</li>\n    </ul>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicFormControlContainerComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: core$1.DynamicFormLayoutService },
            { type: core$1.DynamicFormValidationService }
        ]; };
        DynamicBasicFormControlContainerComponent.propDecorators = {
            contentTemplateList: [{ type: core.ContentChildren, args: [core$1.DynamicTemplateDirective,] }],
            inputTemplateList: [{ type: core.Input, args: ["templates",] }],
            context: [{ type: core.Input }],
            group: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            model: [{ type: core.Input }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            componentViewContainerRef: [{ type: core.ViewChild, args: ["componentViewContainer", { read: core.ViewContainerRef },] }]
        };
        return DynamicBasicFormControlContainerComponent;
    }(core$1.DynamicFormControlContainerComponent));
    /**
     * @param {?} model
     * @return {?}
     */
    function basicUIFormControlMapFn(model) {
        switch (model.type) {
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                return DynamicBasicFormArrayComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                return DynamicBasicCheckboxComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                return DynamicBasicFormGroupComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                return DynamicBasicFormGroupComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                return DynamicBasicInputComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                return DynamicBasicRadioGroupComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                return DynamicBasicSelectComponent;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                return DynamicBasicTextAreaComponent;
            default:
                return null;
        }
    }

    var __extends$8 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DynamicBasicFormComponent = /** @class */ (function (_super) {
        __extends$8(DynamicBasicFormComponent, _super);
        function DynamicBasicFormComponent(formService, layoutService) {
            var _this = _super.call(this, formService, layoutService) || this;
            _this.formService = formService;
            _this.layoutService = layoutService;
            _this.blur = new core.EventEmitter();
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            return _this;
        }
        DynamicBasicFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-basic-form",
                        template: "<dynamic-basic-form-control *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                            [group]=\"formGroup\"\n                            [hidden]=\"model.hidden\"\n                            [layout]=\"formLayout\"\n                            [model]=\"model\"\n                            [ngClass]=\"[getClass(model,'element','host'), getClass(model,'grid','host')]\"\n                            [templates]=\"templates\"\n                            (blur)=\"onEvent($event, 'blur')\"\n                            (change)=\"onEvent($event, 'change')\"\n                            (focus)=\"onEvent($event, 'focus')\"></dynamic-basic-form-control>"
                    }] }
        ];
        /** @nocollapse */
        DynamicBasicFormComponent.ctorParameters = function () { return [
            { type: core$1.DynamicFormService },
            { type: core$1.DynamicFormLayoutService }
        ]; };
        DynamicBasicFormComponent.propDecorators = {
            formGroup: [{ type: core.Input, args: ["group",] }],
            formModel: [{ type: core.Input, args: ["model",] }],
            formLayout: [{ type: core.Input, args: ["layout",] }],
            blur: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            templates: [{ type: core.ContentChildren, args: [core$1.DynamicTemplateDirective,] }],
            components: [{ type: core.ViewChildren, args: [DynamicBasicFormControlContainerComponent,] }]
        };
        return DynamicBasicFormComponent;
    }(core$1.DynamicFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DynamicFormsBasicUIModule = /** @class */ (function () {
        function DynamicFormsBasicUIModule() {
        }
        DynamicFormsBasicUIModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            forms.FormsModule,
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            angular2TextMask.TextMaskModule,
                            core$1.DynamicFormsCoreModule
                        ],
                        declarations: [
                            DynamicBasicCheckboxComponent,
                            DynamicBasicFormArrayComponent,
                            DynamicBasicFormComponent,
                            DynamicBasicFormControlContainerComponent,
                            DynamicBasicFormGroupComponent,
                            DynamicBasicInputComponent,
                            DynamicBasicRadioGroupComponent,
                            DynamicBasicSelectComponent,
                            DynamicBasicTextAreaComponent
                        ],
                        entryComponents: [
                            DynamicBasicCheckboxComponent,
                            DynamicBasicFormArrayComponent,
                            DynamicBasicFormGroupComponent,
                            DynamicBasicInputComponent,
                            DynamicBasicRadioGroupComponent,
                            DynamicBasicSelectComponent,
                            DynamicBasicTextAreaComponent
                        ],
                        exports: [
                            core$1.DynamicFormsCoreModule,
                            DynamicBasicCheckboxComponent,
                            DynamicBasicFormArrayComponent,
                            DynamicBasicFormComponent,
                            DynamicBasicFormControlContainerComponent,
                            DynamicBasicFormGroupComponent,
                            DynamicBasicInputComponent,
                            DynamicBasicRadioGroupComponent,
                            DynamicBasicSelectComponent,
                            DynamicBasicTextAreaComponent
                        ]
                    },] }
        ];
        return DynamicFormsBasicUIModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.DynamicBasicCheckboxComponent = DynamicBasicCheckboxComponent;
    exports.DynamicBasicFormArrayComponent = DynamicBasicFormArrayComponent;
    exports.DynamicBasicFormGroupComponent = DynamicBasicFormGroupComponent;
    exports.DynamicBasicInputComponent = DynamicBasicInputComponent;
    exports.DynamicBasicRadioGroupComponent = DynamicBasicRadioGroupComponent;
    exports.DynamicBasicSelectComponent = DynamicBasicSelectComponent;
    exports.DynamicBasicTextAreaComponent = DynamicBasicTextAreaComponent;
    exports.DynamicBasicFormComponent = DynamicBasicFormComponent;
    exports.basicUIFormControlMapFn = basicUIFormControlMapFn;
    exports.DynamicBasicFormControlContainerComponent = DynamicBasicFormControlContainerComponent;
    exports.DynamicFormsBasicUIModule = DynamicFormsBasicUIModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ui-basic.umd.js.map
